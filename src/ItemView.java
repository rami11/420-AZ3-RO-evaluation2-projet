import javax.swing.*;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.SQLException;

public class ItemView extends JFrame implements PropertyChangeListener {

    ItemController itemController;
    // Variables declaration - do not modify
    private JButton firstButton;
    private JButton nextButton;
    private JButton previousButton;
    private JButton lastButton;

    private JButton addButton;
    private JButton cancelButton;
    private JButton newButton;
    private JButton deleteButton;

    private JLabel jLabel1;
    private JLabel jLabelCat;
    private JLabel jLabelCode;
    private JLabel jLabelDes;
    private JLabel jLabelPrix;
    private JPanel jPanelCenter;
    private JPanel jPanelNorth;
    private JPanel jPanelSouth;

    private JTextField unitPriceField;
    private JTextField itemNameField;
    private JTextField catIdField;
    private JTextField itemIdField;

    private Item item = new Item();

    /**
     * Creates new form ItemView
     */
    public ItemView() {
        itemController = new ItemController();

        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        EventQueue.invokeLater(() -> {
            new ItemView().setVisible(true);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        initPanelNorth();

        initPanelCenter();

        initPanelSouth();

        setItemViewValues(itemController.getFirstItem());
        enablePanelNorth();
        disablePanelSouth();

        pack();
    }

    private void initPanelCenter() {
        jPanelCenter = new JPanel();
        jLabelCode = new JLabel();
        itemNameField = new JTextField();
        jLabelDes = new JLabel();
        catIdField = new JTextField();
        jLabelCat = new JLabel();
        unitPriceField = new JTextField();
        jLabelPrix = new JLabel();
        itemIdField = new JTextField();
        jLabel1 = new JLabel();

        GridBagConstraints gridBagConstraints;
        jPanelCenter.setLayout(new GridBagLayout());

        jLabelCode.setText("Item ID");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.insets = new Insets(9, 0, 9, 0);
        jPanelCenter.add(jLabelCode, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(8, 0, 8, 0);
        jPanelCenter.add(itemIdField, gridBagConstraints);

        jLabelDes.setText("Item Name");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(9, 0, 9, 0);
        jPanelCenter.add(jLabelDes, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(9, 0, 9, 0);
        jPanelCenter.add(itemNameField, gridBagConstraints);

        jLabelCat.setText("Category ID");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new Insets(9, 0, 9, 0);
        jPanelCenter.add(jLabelCat, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(9, 0, 9, 0);
        jPanelCenter.add(catIdField, gridBagConstraints);

        jLabelPrix.setText("Unit Price");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new Insets(9, 0, 9, 0);
        jPanelCenter.add(jLabelPrix, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.insets = new Insets(9, 0, 9, 0);
        jPanelCenter.add(unitPriceField, gridBagConstraints);

        jLabel1.setText("Cette application vous permet de parcourir et modifier les enregistrement de la table Article ");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new Insets(69, 0, 30, 0);
        jPanelCenter.add(jLabel1, gridBagConstraints);

        getContentPane().add(jPanelCenter, BorderLayout.CENTER);
    }

    private void initPanelSouth() {
        jPanelSouth = new JPanel();

        newButton = new JButton();
        addButton = new JButton();
        cancelButton = new JButton();
        deleteButton = new JButton();

        jPanelSouth.setBorder(BorderFactory.createEtchedBorder());

        newButton.setText("New");
        newButton.addActionListener(event -> {
            resetItemViewValues();
            disablePanelNorth();
            enablePanelSouth();
        });
        jPanelSouth.add(newButton);

        addButton.setText("Add");
        addButton.addActionListener(event -> {
            try {
                int itemId = Integer.parseInt(itemIdField.getText());
                String name = itemNameField.getText();
                double unitPrice = Double.parseDouble(unitPriceField.getText());
                int categoryId = Integer.parseInt(catIdField.getText());

                item = new Item(itemId, name, unitPrice, categoryId);
                itemController.addItem(item);

                JOptionPane.showMessageDialog(this, "Item " + itemId + " added.", "Success!", JOptionPane.INFORMATION_MESSAGE);
                resetItemViewValues();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Invalid value!", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Update failed!", JOptionPane.ERROR_MESSAGE);
            }
        });
        jPanelSouth.add(addButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(event -> {
            enablePanelNorth();
            disablePanelSouth();
            setItemViewValues(itemController.getFirstItem());
        });
        jPanelSouth.add(cancelButton);

        deleteButton.setText("Delete");
        jPanelSouth.add(deleteButton);

        getContentPane().add(jPanelSouth, BorderLayout.SOUTH);
    }

    private void setPanelSouthEnabled(boolean isEnabled) {
        newButton.setEnabled(!isEnabled);
        addButton.setEnabled(isEnabled);
        cancelButton.setEnabled(isEnabled);
        deleteButton.setEnabled(!isEnabled);
    }

    private void enablePanelSouth() {
        setPanelSouthEnabled(true);
    }

    private void disablePanelSouth() {
        setPanelSouthEnabled(false);
    }

    private void initPanelNorth() {
        jPanelNorth = new JPanel();
        firstButton = new JButton();
        nextButton = new JButton();
        previousButton = new JButton();
        lastButton = new JButton();

        jPanelNorth.setBorder(BorderFactory.createEtchedBorder());

        firstButton.setText("First");
        firstButton.addActionListener(event -> {
            setItemViewValues(itemController.getFirstItem());
        });
        jPanelNorth.add(firstButton);

        nextButton.setText("Next");
        nextButton.addActionListener(event -> {
            setItemViewValues(itemController.getNextItem());
        });
        jPanelNorth.add(nextButton);

        previousButton.setText("Previous");
        previousButton.addActionListener(event -> {
            setItemViewValues((itemController.getPreviousItem()));
        });
        jPanelNorth.add(previousButton);

        lastButton.setText("Last");
        lastButton.addActionListener(event -> {
            setItemViewValues(itemController.getLastItem());
        });
        jPanelNorth.add(lastButton);

        getContentPane().add(jPanelNorth, BorderLayout.NORTH);
    }

    private void setPanelNorthEnabled(boolean isEnabled) {
        firstButton.setEnabled(isEnabled);
        nextButton.setEnabled(isEnabled);
        previousButton.setEnabled(isEnabled);
        lastButton.setEnabled(isEnabled);
    }

    private void disablePanelNorth() {
        setPanelNorthEnabled(false);
    }

    private void enablePanelNorth() {
        setPanelNorthEnabled(true);
    }

    private void setItemViewValues(Item item) {
        itemNameField.setText(String.valueOf(item.getName()));
        catIdField.setText(String.valueOf(item.getCategoryId()));
        unitPriceField.setText(String.valueOf(item.getUnitPrice()));
        itemIdField.setText(String.valueOf(item.getId()));
    }

    private void resetItemViewValues() {
        itemNameField.setText("");
        catIdField.setText("");
        unitPriceField.setText("");
        itemIdField.setText("");
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

    }
}
